# = From Base Game
# Panel Constants
@panel_width_minus_10 = 530
@panel_width_minus_30 = 510
@panel_width = 540
@panel_width_half = 270
@panel_width_plus_10 = 550
@panel_width_plus_14 = 554
@panel_width_plus_14_half = 277
@panel_width_plus_20 = 560
@panel_width_plus_30 = 570
@panel_width_plus_70 = 610
# Tooltip Constants
@tooltip_max_width = 550
@tooltip_max_width_plus_margin = 580

types gate_types {

    type gate_technology_panel = default_block_window {
        name = "gate_technology_panel"
        datacontext = "[GetMetaPlayer.GetPlayedOrObservedCountry]"

        visible = "[Or(GetVariableSystem.HasValue('com_open_window', 'gate_button_technology'), GetVariableSystem.HasValue('com_alert_action', Localize('gg_panel_technology_action')))]"

        blockoverride "animation_state_block" {
            state = {
                name = _show
                # Close open panel before showing this one
                on_start = "[InformationPanelBar.ClosePanel]"
                on_start = "[MapListPanelManager.CloseCurrentPanel]"
                start_sound = {
                    soundeffect = "event:/SFX/UI/SideBar/technology"
                }
                on_finish = "[GetScriptedGui('sgui_gate_technology_tab_researcher').Execute(GuiScope.SetRoot(Country.MakeScope).End)]"
            }

            state = {
                name = _hide
                start_sound = {
                    soundeffect = "event:/SFX/UI/SideBar/technology_stop"
                }
            }
        }

        blockoverride "window_header_name"
        {
            text = gg_panel_technology_title
            default_format = "#bold"
        }

        blockoverride "header_back_button" {
            onclick = "[GetVariableSystem.Clear('com_open_window')]"
            onclick = "[GetVariableSystem.Clear('com_alert_action')]"
        }

        blockoverride "header_close_button" {
            onclick = "[GetVariableSystem.Clear('com_open_window')]"
            onclick = "[GetVariableSystem.Clear('com_alert_action')]"
        }

        blockoverride "fixed_top"
        {
            tab_buttons = {
                # Researcher
                blockoverride "first_button" {
                    text = gg_tab_technology_researcher
                }
                blockoverride "first_button_tooltip" {
                    tooltip = gg_tab_technology_researcher
                }
                blockoverride "first_button_click" {
                    onclick = "[GetScriptedGui('sgui_gate_technology_tab_researcher').Execute(GuiScope.SetRoot(Country.MakeScope).End)]"
                }
                blockoverride "first_button_visibility" {
                    visible = "[GetScriptedGui('sgui_gate_technology_tab_researcher').IsShown(GuiScope.SetRoot(Country.MakeScope).End)]"
                }
                blockoverride "first_button_visibility_checked" {
                    visible = "[Not(GetScriptedGui('sgui_gate_technology_tab_researcher').IsShown(GuiScope.SetRoot(Country.MakeScope).End))]"
                }
                blockoverride "first_button_selected" {
                    text = gg_tab_technology_researcher
                }
                blockoverride "first_button_background" {
                    background = {
                        margin = { 0 -2 }
                        using = fade_bottom_entry_fancy_header_colored
                        using = Color_Orange
                        alpha = 0.5
                    }
                }
                blockoverride "first_button_background_selected" {
                    background = {
                        using = fade_bottom_entry_fancy_header_colored
                        using = Color_Orange
                        alpha = 0.5
                    }
                }

                # Production
                blockoverride "second_button" {
                    text = "PRODUCTION_NO_CONCEPT"
                }
                blockoverride "second_button_tooltip" {
                    tooltip = "PRODUCTION_NO_CONCEPT"
                }
                blockoverride "second_button_click" {
                    enabled = "[GetScriptedGui('sgui_gate_technology_tab_production').IsValid(GuiScope.SetRoot(Country.MakeScope).End)]"
                    onclick = "[GetScriptedGui('sgui_gate_technology_tab_production').Execute(GuiScope.SetRoot(Country.MakeScope).End)]"
                }
                blockoverride "second_button_visibility" {
                    visible = "[GetScriptedGui('sgui_gate_technology_tab_production').IsShown(GuiScope.SetRoot(Country.MakeScope).End)]"
                }
                blockoverride "second_button_visibility_checked" {
                    visible = "[Not(GetScriptedGui('sgui_gate_technology_tab_production').IsShown(GuiScope.SetRoot(Country.MakeScope).End))]"
                }
                blockoverride "second_button_selected" {
                    text = "PRODUCTION_NO_CONCEPT"
                }
                blockoverride "second_button_background" {
                    background = {
                        margin = { 0 -2 }
                        using = fade_bottom_entry_fancy_header_colored
                        using = Color_Orange
                        alpha = 0.5
                    }
                }
                blockoverride "second_button_background_selected" {
                    background = {
                        using = fade_bottom_entry_fancy_header_colored
                        using = Color_Orange
                        alpha = 0.5
                    }
                }

                # Military
                blockoverride "third_button" {
                    text = "MILITARY"
                }
                blockoverride "third_button_tooltip" {
                    tooltip = "MILITARY"
                }
                blockoverride "third_button_click" {
                    enabled = "[GetScriptedGui('sgui_gate_technology_tab_military').IsValid(GuiScope.SetRoot(Country.MakeScope).End)]"
                    onclick = "[GetScriptedGui('sgui_gate_technology_tab_military').Execute(GuiScope.SetRoot(Country.MakeScope).End)]"
                }
                blockoverride "third_button_visibility" {
                    visible = "[GetScriptedGui('sgui_gate_technology_tab_military').IsShown(GuiScope.SetRoot(Country.MakeScope).End)]"
                }
                blockoverride "third_button_visibility_checked" {
                    visible = "[Not(GetScriptedGui('sgui_gate_technology_tab_military').IsShown(GuiScope.SetRoot(Country.MakeScope).End))]"
                }
                blockoverride "third_button_selected" {
                    text = "MILITARY"
                }
                blockoverride "third_button_background" {
                    background = {
                        margin = { 0 -2 }
                        using = fade_bottom_entry_fancy_header_colored
                        using = Color_Red
                        alpha = 0.15
                    }
                }
                blockoverride "third_button_background_selected" {
                    background = {
                        using = fade_bottom_entry_fancy_header_colored
                        using = Color_Red
                        alpha = 0.15
                    }
                }

                # Society
                blockoverride "fourth_button" {
                    text = "SOCIETY"
                }
                blockoverride "fourth_button_tooltip" {
                    tooltip = "SOCIETY"
                }
                blockoverride "fourth_button_click" {
                    enabled = "[GetScriptedGui('sgui_gate_technology_tab_society').IsValid(GuiScope.SetRoot(Country.MakeScope).End)]"
                    onclick = "[GetScriptedGui('sgui_gate_technology_tab_society').Execute(GuiScope.SetRoot(Country.MakeScope).End)]"
                }
                blockoverride "fourth_button_visibility" {
                    visible = "[GetScriptedGui('sgui_gate_technology_tab_society').IsShown(GuiScope.SetRoot(Country.MakeScope).End)]"
                }
                blockoverride "fourth_button_visibility_checked" {
                    visible = "[Not(GetScriptedGui('sgui_gate_technology_tab_society').IsShown(GuiScope.SetRoot(Country.MakeScope).End))]"
                }
                blockoverride "fourth_button_selected" {
                    text = "SOCIETY"
                }
                blockoverride "fourth_button_background" {
                    background = {
                        margin = { 0 -2 }
                        using = fade_bottom_entry_fancy_header_colored
                        using = Color_Red
                        alpha = 0.15
                    }
                }
                blockoverride "fourth_button_background_selected" {
                    background = {
                        using = fade_bottom_entry_fancy_header_colored
                        using = Color_Red
                        alpha = 0.15
                    }
                }
            }

            flowcontainer = {
                direction = vertical
                default_header = {
                    blockoverride "text" {
                        text = gg_header_magic_innovation
                    }
                }
                flowcontainer = {
                    direction = vertical
                    margin = { 15 0 }
                    textbox = {
                        margin = { 0 10 }
                        minimumsize = { @panel_width_minus_30 -1 }
                        text = gg_magic_innovation_total
                        autoresize = yes
                        align = left
                        using = fontsize_large
                    }

                    divider_light = {
                        size = { @panel_width_minus_30 2 }
                    }

                    flowcontainer = {
                        margin = { 0 10 }
                        direction = vertical
                        textbox = {
                            text = gg_monthly_magic_innovation
                            autoresize = yes
                            align = left
                        }
                    }

                    divider_decorative = {
                        size = { @panel_width_minus_30 2 }
                        alpha = 0.7
                    }

                    widget = {
                        size = { 10 10 }
                    }
                }
            }
        }

        blockoverride "scrollarea_content" {
            # Researcher
            flowcontainer = {
                visible = "[GetScriptedGui('sgui_gate_technology_tab_researcher').IsShown(GuiScope.SetRoot(Country.MakeScope).End)]"
                using = default_list_position
                direction = vertical
                margin_top = 10

                default_header = {
                    blockoverride "text" {
                        text = gg_header_magic_researcher
                    }
                }

                # No Researcher
                flowcontainer = {
                    direction = vertical
                    using = default_list_position
                    visible = "[Not(GetScriptedGui('sgui_gate_has_researcher').IsValid(GuiScope.SetRoot(Country.MakeScope).End))]"

                    textbox = {
                        visible = "[Not(Country.MakeScope.Var('magic_research').IsSet)]"
                        text = gg_technology_no_researcher
                        autoresize = yes
                        align = center|nobaseline
                        using = fontsize_large
                        parentanchor = top|hcenter
                        margin_bottom = 0
                        margin_top = 50
                        alpha = 0.5
                        minimumsize = { @panel_width -1 }
                    }

                    textbox = {
                        visible = "[Not(Country.MakeScope.Var('magic_research').IsSet)]"
                        text = gg_technology_no_researcher_blink
                        autoresize = yes
                        align = center|nobaseline
                        using = fontsize_xxl
                        using = look_at_me_text_animation
                        parentanchor = top|hcenter
                        margin_bottom = 35
                        margin_top = 0
                        minimumsize = { @panel_width -1 }
                    }
                }

                # Researcher
                com_journal_entry_character = {
                    visible = "[GetScriptedGui('sgui_gate_has_researcher').IsValid(GuiScope.SetRoot(Country.MakeScope).End)]"
                    blockoverride "character_context" {
                        datacontext = "[Country.MakeScope.Var('magic_researcher').GetCharacter]"
                    }
                    blockoverride "character_size" {
                        size = { @panel_width 290 }
                    }
                }

                widget = {
                    size = { 0 20 }
                }

                default_header = {
                    blockoverride "text" {
                        raw_text = "[GetBuildingType('building_magic_research_institute').GetNameNoFormatting]"
                    }
                }

                # Research Institute
                gate_building_details = {
                    datacontext = "[Country.GetCapital.GetBuilding('building_magic_research_institute')]"
                }
            }

            # Production
            flowcontainer = {
                visible = "[GetScriptedGui('sgui_gate_technology_tab_production').IsShown(GuiScope.SetRoot(Country.MakeScope).End)]"
                using = default_list_position
                direction = vertical

                default_header = {
                    blockoverride "text" {
                        text = "gg_header_research_list_production_open"
                    }
                }

                gate_technologies_production = {}

                default_header = {
                    blockoverride "text" {
                        text = "gg_header_research_list_done"
                    }
                }

                gate_technologies_production = {
                    blockoverride "visibility" {
                        visible = "[And(Technology.HasResearchedTech(Country.Self), Or(Not(Country.MakeScope.Var('magic_research').IsSet), Not(ObjectsEqual(Country.MakeScope.Var('magic_research').GetTechnology.MakeScope, Technology.MakeScope))))]"
                    }
                    blockoverride "enabled" {
                        enabled = no
                    }
                }
            }

            # Military
            flowcontainer = {
                visible = "[GetScriptedGui('sgui_gate_technology_tab_military').IsShown(GuiScope.SetRoot(Country.MakeScope).End)]"
                using = default_list_position
                direction = vertical

                default_header = {
                    blockoverride "text" {
                        text = "gg_header_research_list_military_open"
                    }
                }

                gate_technologies_military = {}

                default_header = {
                    blockoverride "text" {
                        text = "gg_header_research_list_done"
                    }
                }

                gate_technologies_military = {
                    blockoverride "visibility" {
                        visible = "[And(Technology.HasResearchedTech(Country.Self), Or(Not(Country.MakeScope.Var('magic_research').IsSet), Not(ObjectsEqual(Country.MakeScope.Var('magic_research').GetTechnology.MakeScope, Technology.MakeScope))))]"
                    }
                    blockoverride "enabled" {
                        enabled = no
                    }
                }
            }

            # Society
            flowcontainer = {
                visible = "[GetScriptedGui('sgui_gate_technology_tab_society').IsShown(GuiScope.SetRoot(Country.MakeScope).End)]"
                using = default_list_position
                direction = vertical

                default_header = {
                    blockoverride "text" {
                        text = "gg_header_research_list_society_open"
                    }
                }

                gate_technologies_society = {}

                default_header = {
                    blockoverride "text" {
                        text = "gg_header_research_list_done"
                    }
                }

                gate_technologies_society = {
                    blockoverride "visibility" {
                        visible = "[And(Technology.HasResearchedTech(Country.Self), Or(Not(Country.MakeScope.Var('magic_research').IsSet), Not(ObjectsEqual(Country.MakeScope.Var('magic_research').GetTechnology.MakeScope, Technology.MakeScope))))]"
                    }
                    blockoverride "enabled" {
                        enabled = no
                    }
                }
            }

        }
    }

    type gate_technologies_production = flowcontainer {
        direction = vertical
        parentanchor = top|left
        margin_left = 8
        block "container_spacing" {
            spacing = 5
            margin_top = 10
            margin_bottom = 10
        }

        gate_technology = {
            blockoverride "context" {
                datacontext = "[GetTechnology('magic_understanding_production')]"
                datacontext = "[GetScriptedGui('magic_understanding_production')]"
            }
        }

        gate_technology = {
            blockoverride "context" {
                datacontext = "[GetTechnology('mana_extraction')]"
                datacontext = "[GetScriptedGui('mana_extraction')]"
            }
        }

        gate_technology = {
            blockoverride "context" {
                datacontext = "[GetTechnology('magic_farming')]"
                datacontext = "[GetScriptedGui('magic_farming')]"
            }
        }

        gate_technology = {
            blockoverride "context" {
                datacontext = "[GetTechnology('magic_dwarf_murk')]"
                datacontext = "[GetScriptedGui('magic_dwarf_murk')]"
            }
        }

        gate_technology = {
            blockoverride "context" {
                datacontext = "[GetTechnology('magic_dwarf_murk_railways')]"
                datacontext = "[GetScriptedGui('magic_dwarf_murk_railways')]"
            }
        }

        gate_technology = {
            blockoverride "context" {
                datacontext = "[GetTechnology('magic_golems')]"
                datacontext = "[GetScriptedGui('magic_golems')]"
            }
        }

        gate_technology = {
            blockoverride "context" {
                datacontext = "[GetTechnology('magic_and_steam')]"
                datacontext = "[GetScriptedGui('magic_and_steam')]"
            }
        }

        gate_technology = {
            blockoverride "context" {
                datacontext = "[GetTechnology('magic_steam_golems')]"
                datacontext = "[GetScriptedGui('magic_steam_golems')]"
            }
        }

        gate_technology = {
            blockoverride "context" {
                datacontext = "[GetTechnology('magic_and_electricity')]"
                datacontext = "[GetScriptedGui('magic_and_electricity')]"
            }
        }

        gate_technology = {
            blockoverride "context" {
                datacontext = "[GetTechnology('magic_electric_golems')]"
                datacontext = "[GetScriptedGui('magic_electric_golems')]"
            }
        }
    }

    type gate_technologies_military = flowcontainer {
        direction = vertical
        margin_left = 8
        block "container_spacing" {
            spacing = 5
            margin_top = 10
            margin_bottom = 10
        }

        gate_technology = {
            blockoverride "context" {
                datacontext = "[GetTechnology('magic_understanding_military')]"
                datacontext = "[GetScriptedGui('magic_understanding_military')]"
            }
        }

        gate_technology = {
            blockoverride "context" {
                datacontext = "[GetTechnology('mage_infantry')]"
                datacontext = "[GetScriptedGui('mage_infantry')]"
            }
        }

        gate_technology = {
            blockoverride "context" {
                datacontext = "[GetTechnology('mage_artillery')]"
                datacontext = "[GetScriptedGui('mage_artillery')]"
            }
        }
    }

    type gate_technologies_society = flowcontainer {
        direction = vertical
        margin_left = 8
        block "container_spacing" {
            spacing = 5
            margin_top = 10
            margin_bottom = 10
        }

        gate_technology = {
            blockoverride "context" {
                datacontext = "[GetTechnology('magic_understanding_society')]"
                datacontext = "[GetScriptedGui('magic_understanding_society')]"
            }
        }

        gate_technology = {
            blockoverride "context" {
                datacontext = "[GetTechnology('dwarven_gate_immigration')]"
                datacontext = "[GetScriptedGui('dwarven_gate_immigration')]"
            }
        }

        gate_technology = {
            blockoverride "context" {
                datacontext = "[GetTechnology('formalized_magic')]"
                datacontext = "[GetScriptedGui('formalized_magic')]"
            }
        }

        gate_technology = {
            blockoverride "context" {
                datacontext = "[GetTechnology('magic_science')]"
                datacontext = "[GetScriptedGui('magic_science')]"
            }
        }
    }

    ### Gate Technology
    type gate_technology = flowcontainer {
        block "context" {
            #datacontext = "[GetTechnology('some_technology')]"
        }

        block "visibility" {
            visible = "[And3(ScriptedGui.IsShown(GuiScope.SetRoot(Country.MakeScope).End), Not(Technology.HasResearchedTech(Country.Self)), Or(Not(Country.MakeScope.Var('magic_research').IsSet), Not(ObjectsEqual(Country.MakeScope.Var('magic_research').GetTechnology.MakeScope, Technology.MakeScope))))]"
        }

        flowcontainer = {
            visible = "[Technology.HasResearchedTech(Country.Self)]"

            background = {
                using = frame_small
            }

            tooltipwidget = {
                FancyTooltip_Technology = {}
            }

            magic_technology_inner = {
                blockoverride "flowcontainer_properties" {
                    margin_left = 10
                    margin_right = 10
                    margin_top = 10
                    margin_bottom = 15
                }
            }
        }

        button = {
            visible = "[Not(Technology.HasResearchedTech(Country.Self))]"

            tooltipwidget = {
                magic_technology_tooltip = {}
            }

            using = technology_confirm_button_sound

            block "button_style" {
                using = default_button
            }

            block "onclick" {
                onclick = "[GetScriptedGui('sgui_gate_window_execute_research').Execute(GuiScope
                                .SetRoot(Country.MakeScope)
                                .AddScope('technology', Technology.MakeScope)
                                .AddScope('cost', MakeScopeValue(Technology.GetCost(Country.Self)))
                                .End
                            )]"
                onclick = "[ScriptedGui.Execute(GuiScope.SetRoot(Country.MakeScope).AddScope('technology', Technology.MakeScope).End)]"
            }

            block "enabled" {
                enabled = "[And3(
                                ScriptedGui.IsValid(GuiScope.SetRoot(Country.MakeScope).End),
                                GetScriptedGui('sgui_gate_window_execute_research').IsValid(GuiScope.SetRoot(Country.MakeScope).AddScope('technology', Technology.MakeScope).End),
                                GreaterThanOrEqualTo_CFixedPoint(Country.MakeScope.Var('magic_innovation').GetValue, Technology.GetCost(Country.Self))
                            )]"
            }

            block "background" {}

            magic_technology_inner = {}
        }
    }

    type magic_technology_tooltip = FancyTooltipWidgetType {
        blockoverride "text" {
            # Does not modify size that is why we repeat it below
            widget = {
                layer = bottom
                parentanchor = top|left
                custom_tooltip_textbox = {
                    text = DATA_TECHNOLOGY_NAME_TOOLTIP
                }
            }
        }
        blockoverride "tooltip_content_before" {
        }
        blockoverride "tooltip_content_after" {
            # This widget will be layered over the original tooltip to overwrite the first line.
            # This is needed because there is no way rebuild/modify the full technology tooltip.
            # So we render the original tooltip and overwrite the first line to replace some text.
            widget = {
                flowcontainer = {
                    margin = { 15 10 }
                    position = { -15 -10 }
                    min_width = @tooltip_max_width_plus_margin
                    custom_tooltip_textbox = {
                        text = gg_magic_technology_tooltip_cost
                        multiline = no
                    }
                    custom_tooltip_textbox = {
                        raw_text = "#v #tooltippable [Technology.GetCost(Country.Self)|K]#!#!"
                        multiline = no
                        tooltip = "[Technology.GetCostDesc(Country.Self)]"
                    }
                    custom_tooltip_textbox = {
                        text = gg_magic_technology_tooltip_duration
                        multiline = no
                    }

                    background = {
                        spriteType = CorneredTiled
                        spriteborder = { 48 48 }
                        texture = "gfx/interface/tooltip/tooltip_bg.dds"
                        texture_density = 2
                        tintcolor = "[TooltipInfo.GetTintColor]"
                    }
                }
            }
            # Invisible and just used for tooltip sizing
            container = {
                alpha = 0
                layer = bottom
                parentanchor = top|left
                custom_tooltip_textbox = {
                    text = DATA_TECHNOLOGY_NAME_TOOLTIP
                }
                flowcontainer = {
                    min_width = @tooltip_max_width

                    custom_tooltip_textbox = {
                        text = gg_magic_technology_tooltip_cost
                        multiline = no
                    }
                    custom_tooltip_textbox = {
                        raw_text = "#v #tooltippable [Technology.GetCost(Country.Self)|K]#!#!"
                        multiline = no
                        tooltip = "[Technology.GetCostDesc(Country.Self)]"
                    }
                    custom_tooltip_textbox = {
                        text = gg_magic_technology_tooltip_duration
                        multiline = no
                    }
                }
            }
        }

        blockoverride "icon_texture" {
            texture = "[Technology.GetTexture]"

            widget = {
                size = { 34 34 }
                position = { -6 30 }

                icon = {
                    size = { 60% 60% }
                    texture = "gfx/interface/backgrounds/round_button_bg.dds"
                }

                textbox = {
                    text = "TECHNOLOGY_TYPE_DESCRIPTION"
                    align = center|nobaseline
                    position = { -7 -7 }
                    using = fontsize_small
                    size = { 20% 20% }
                    parentanchor = center
                }
            }

        }

        blockoverride "name" {
            text = "[Technology.GetNameNoFormatting]"
        }

        blockoverride "type" {
            text = "TOOLTIP_TYPE_TECHNOLOGY"
        }
    }

    type magic_technology_inner = flowcontainer {
        resizeparent = yes
        direction = vertical

        block "minimumsize" {
            minimumsize = { @panel_width -1 }
        }
        block "flowcontainer_properties" {
            margin_left = 10
            margin_right = 10
            margin_bottom = 8
        }

        # Icons & Text
        flowcontainer = {
            margin_left = 5

            # Icons
            flowcontainer = {
                margin_left = 10
                direction = vertical
                margin_top = 8

                # Technology Frame & Icon
                icon = {
                    texture = "gfx/interface/backgrounds/round_frame_dec.dds"
                    parentanchor = top|right
                    size = { 60 60 }
                    alwaystransparent = yes

                    # Technology Icon
                    flowcontainer = {
                        margin = { 10 10 }
                        icon = {
                            texture = "[Technology.GetTexture]"
                            block "iconsize" {
                                size = { 40 40 }
                            }
                        }
                    }
                }
            }

            # Text
            flowcontainer = {
                direction = vertical
                parentanchor = vcenter

                # Title
                textbox = {
                    margin = { 15 10 }
                    background = {
                        using = fade_right_entry_fancy_header_colored
                        using = dark_area
                    }

                    text = "[Technology.GetNameNoFormatting]"
                    autoresize = yes
                    align = left|nobaseline
                    multiline = yes
                    default_format = "#header"

                    block "fontsize" {
                        using = fontsize_large
                    }

                    block "textsize" {
                        maximumsize = { 435 -1 }
                        minimumsize = { 435 -1 }
                    }
                }

                # Description
                textbox = {
                    margin = { 15 0 }
                    margin_bottom = 5
                    text = "[Technology.GetDesc]"
                    visible = "[Not(StringIsEmpty(Technology.GetDesc))]"
                    autoresize = yes
                    align = left|nobaseline
                    multiline = yes
                    block "textsize" {
                        maximumsize = { 435 -1 }
                        minimumsize = { 435 -1 }
                    }
                }
            }
        }

        # Unlocks
        flowcontainer = {
            margin_top = 0
            margin_bottom = 5
            margin_left = 5
            margin_right = 5
            parentanchor = right
            spacing = 5
            datamodel = "[Technology.GetUnlocks(Country.Self)]"

            item = {
                icon = {
                    size = { 25 25 }
                    texture = "[TechnologyUnlock.GetTexture]"
                    tooltip = "[TechnologyUnlock.GetTooltip]"
                    using = tooltip_se
                }
            }
        }

        # progress bar
        flowcontainer = {
            visible = "[And(Country.MakeScope.Var('magic_research').IsSet, ObjectsEqual(Country.MakeScope.Var('magic_research').GetTechnology.MakeScope, Technology.MakeScope))]"
            margin = { 10 10 }
            default_progressbar_horizontal = {
                block "progressbar_size" {
                    size = { 500 20 }
                }
                blockoverride "values" {
                    value = "[Country.MakeScope.Var('magic_research_progress').GetValue]"
                    min = 0
                    max = "[Technology.GetCost(Country.Self)]"
                }
            }
        }
    }

    type gate_building_details = flowcontainer {
        direction = vertical
        using = default_list_position
        margin_bottom = 10

        top_illu = {
            blockoverride "illu" {
                texture = "[Building.GetBuildingType.GetBackground]"
                fittype = start
                alpha = 0.7
            }
            minimumsize = { @panel_width_plus_14 -1 }

            flowcontainer = {
                resizeparent = yes
                parentanchor = hcenter
                margin_top = 15
                margin_bottom = 15
                minimumsize = { 540 147 }

                ### BUILDING ICON
                button = {
                    tooltipwidget = {
                        FancyTooltip_Building = {}
                    }
                    onrightclick = "[RightClickMenuManager.ShowForBuilding(Building.AccessSelf)]"
                    size = { 115 115 }

                    icon = {
                        alpha = "[TransparentIfFalse(Building.IsActive)]"
                        texture = "[Building.GetIcon]"
                        size = { 100% 100% }

                        icon = {
                            visible = "[Building.IsAutoDownsizing]"
                            tooltip = "[Building.GetAutoDownsizeTooltip]"
                            position = { 5 5 }
                            size = { 30 30 }
                            texture = "gfx/interface/production_methods/auto_downsize.dds"
                        }
                    }

                    icon = {
                        visible = "[And( GreaterThan_int32( Building.GetExpansionLevel, '(int32)0'), Not( Building.IsActive ))]"
                        size = { 100% 100% }
                        texture = "gfx/interface/icons/generic_icons/inactive_building.dds"
                    }
                }
            }

            vbox = {
                margin = { 0 20 }
                ### DOWNSIZE / EXPAND
                building_level_controls = {
                    blockoverride "controller_size" {
                        size = { 130 35 }
                    }
                }

                ### BUILD PROGRESS
                hbox = {
                    visible = "[Building.HasConstructionQueued]"

                    default_progressbar_horizontal = {
                        tooltip = "BUILDING_PROGRESS_TOOLTIP"
                        size = { 110 5 }

                        blockoverride "values" {
                            value = "[Building.GetConstructionProgressPercentage]"
                            min = 0
                            max = 1
                        }
                    }
                }

                building_progressbars = {
                    blockoverride "progressbar_size" {
                        size = { 200 26 }
                    }
                }
            }

            flowcontainer = {
                parentanchor = vcenter|right
                margin_left = 2

                condensed_building_information_pms = {
                    blockoverride "pms_slot_sizes" {
                        addcolumn = 72
                        addrow = 70
                    }
                    blockoverride "pms_minimumsize" {
                        minimumsize = { 104 -1 }
                    }
                    blockoverride "pms_item_size" {
                        size = { 70 70 }
                    }
                }
            }
        }

        divider_decorative = {}
        widget = { size = { 5 5 } }

        ### PROCESS
        flowcontainer = {
            using = default_list_position
            direction = vertical
            minimumsize = { @panel_width -1 }

            ### list
            container = {
                minimumsize = { @panel_width -1 }
                parentanchor = hcenter

                ### left
                textbox = {
                    parentanchor = vcenter
                    margin_left = 20
                    align =  nobaseline
                    using = empty_state_text_properties
                    visible = "[Not(Building.IsActive)]"
                    text = "BUILDING_INACTIVE_CONSUMPTION_EMPTY_STATE"
                    multiline = yes
                    max_width = 250
                    min_width = 250
                    autoresize = yes
                }

                flowcontainer = {
                    name = "tutorial_highlight_expenses"
                    direction = vertical
                    spacing = 5
                    parentanchor = left|vcenter
                    minimumsize = { 250 -1 }
                    ignoreinvisible = yes
                    visible = "[Building.IsActive]"

                    ### goods
                    flowcontainer = {
                        parentanchor = hcenter
                        direction = vertical
                        datamodel = "[Building.AccessConsumedGoods]"

                        item = {
                            widget = {
                                size = { 250 44 }
                                name = "tutorial_highlight_goods"
                                tooltipwidget = {
                                    FancyTooltip_Goods = {}
                                }

                                button = {
                                    size = { 100% 40 }
                                    parentanchor = vcenter
                                    using = default_button
                                    onclick = "[InformationPanelBar.OpenGoodsStatePanel(Building.GetState, Goods.Self)]"
                                    onrightclick = "[RightClickMenuManager.ShowForGoods(Goods.AccessSelf)]"
                                }


                                icon = {
                                    size = { 50 50 }
                                    texture = "[Goods.GetTexture]"
                                    position = { 3 0 }
                                    parentanchor = left|vcenter
                                }

                                flowcontainer = {
                                    parentanchor = left|vcenter
                                    spacing = 3
                                    margin_left = 50
                                    margin_top = 7

                                    icon = {
                                        size = { 25 25 }
                                        visible = "[And(Not(Building.HasMaximumInputShortage(Goods.Self)),Building.HasInputShortage(Goods.Self))]"
                                        texture = "gfx/interface/icons/generic_icons/goods_shortage.dds"
                                        tooltip = "GOODS_INPUT_SHORTAGE_TOOLTIP"
                                        parentanchor = left|vcenter
                                    }

                                    icon = {
                                        size = { 25 25 }
                                        visible = "[Building.HasMaximumInputShortage(Goods.Self)]"
                                        texture = "gfx/interface/icons/generic_icons/goods_shortage.dds"
                                        tooltip = "GOODS_INPUT_SHORTAGE_MAX_TOOLTIP"
                                        parentanchor = left|vcenter
                                    }

                                    textbox = {
                                        raw_text = "#bold [FixedPointToInt(Building.GetConsumption(Goods.Self))|D]#!"
                                        visible = "[Not(Building.HasInputShortage(Goods.Self))]"
                                        autoresize = yes
                                        parentanchor = left|vcenter
                                        widgetanchor = left|vcenter
                                        align = left|nobaseline
                                        tooltip = "TOOLTIP_BUILDING_USES_UNITS_INFO"
                                    }

                                    textbox = {
                                        raw_text = "#bold #n [FixedPointToInt(Building.GetConsumption(Goods.Self))|D]#!#!"
                                        visible = "[Building.HasInputShortage(Goods.Self)]"
                                        autoresize = yes
                                        parentanchor = left|vcenter
                                        widgetanchor = left|vcenter
                                        align = left|nobaseline
                                        tooltip = "TOOLTIP_BUILDING_USES_UNITS_INFO"
                                    }
                                }

                                textbox = {
                                    raw_text = "#BOLD @money![FixedPointToInt(Building.GetConsumptionValue(Goods.Self))|1*]#! ([Goods.GetCompareIconAgainstBasePriceNoFormatting( Goods.GetStatePrice )])"
                                    position = { -10 0 }
                                    autoresize = yes
                                    align = right|nobaseline
                                    parentanchor = right|vcenter
                                    widgetanchor = right|vcenter
                                    ### This tooltip blocks going to the locked tooltip of the good, therefore it is commented out
                                    #tooltip = "TOOLTIP_BUILDING_USES_VALUE_INFO"
                                }
                            }
                        }
                    }

                    ### wages
                    building_process_entry = {
                        blockoverride "visible" {
                            visible = "[GreaterThan_CFixedPoint(Building.GetLastWagesExpenses, '(CFixedPoint)0')]"
                        }
                        blockoverride "text" {
                            text = "WAGES"
                        }
                        blockoverride "text_right" {
                            raw_text = "#variable @money![Building.GetLastWagesExpenses|K]#!"
                            tooltip = "[Building.GetLastWagesExpensesDesc]"
                        }
                    }

                    ### slave upkeep
                    building_process_entry = {
                        blockoverride "visible" {
                            visible = "[Or( Building.HasSlaves, GreaterThan_CFixedPoint(Building.GetLastSlaveUpkeep, '(CFixedPoint)0') )]"
                        }
                        blockoverride "text" {
                            text = "SLAVE_UPKEEP"
                            tooltip = "[Building.GetLastSlaveUpkeepDesc]"
                        }
                        blockoverride "text_right" {
                            raw_text = "#variable @money![Building.GetLastSlaveUpkeep|K]#!"
                            tooltip = "[Building.GetLastSlaveUpkeepDesc]"
                        }
                    }

                    ### tariffs
                    building_process_entry = {
                        blockoverride "visible" {
                            visible = "[GreaterThan_CFixedPoint(Building.GetTariffsPaid, '(CFixedPoint)0')]"
                        }
                        blockoverride "text" {
                            text = "[concept_tariffs]"
                        }
                        blockoverride "text_right" {
                            raw_text = "#variable @money![Building.GetTariffsPaid|K]#!"
                        }
                    }

                    ### infrastructure
                    building_process_entry = {
                        tooltip = BUILDING_INFRA_USAGE_TOOLTIP

                        blockoverride "visible" {
                            visible = "[Building.UsesInfrastructure]"
                        }
                        blockoverride "text" {
                            text = "[concept_infrastructure_usage]"
                        }
                        blockoverride "text_right" {
                            raw_text = "#variable [Building.CalcInfrastructureUsage|=0]#!"
                        }
                    }
                }

                ### center arrow
                icon = {
                    size = { 30 30 }
                    texture = "gfx/interface/icons/generic_icons/turns_into.dds"
                    parentanchor = center
                    alpha = "[TransparentIfFalse(Building.IsActive)]"

                    using = visible_if_produces
                }

                ### right
                flowcontainer = {
                    name = "tutorial_highlight_revenues"
                    direction = vertical
                    spacing = 5
                    minimumsize = { 250 -1 }
                    parentanchor = right|vcenter
                    ignoreinvisible = yes
                    alpha = "[TransparentIfFalse(Building.IsActive)]"

                    ### goods
                    flowcontainer = {
                        parentanchor = hcenter
                        direction = vertical
                        datamodel = "[Building.AccessProducedGoods]"

                        item = {
                            widget = {
                                size = { 250 44 }
                                tooltipwidget = {
                                    FancyTooltip_Goods = {}
                                }

                                button = {
                                    size = { 100% 40 }
                                    parentanchor = vcenter
                                    using = default_button
                                    onclick = "[InformationPanelBar.OpenGoodsStatePanel(Building.GetState, Goods.Self)]"
                                    onrightclick = "[RightClickMenuManager.ShowForGoods(Goods.AccessSelf)]"
                                }

                                icon = {
                                    size = { 50 50 }
                                    texture = "[Goods.GetTexture]"
                                    position = { 3 0 }
                                    parentanchor = left|vcenter
                                }

                                flowcontainer = {
                                    parentanchor = left|vcenter
                                    spacing = 3
                                    margin_left = 50
                                    margin_top = 7

                                    icon = {
                                        size = { 25 25 }
                                        visible = "[And(Building.HasAnyInputShortage,GreaterThan_CFixedPoint(Building.GetInputShortagePenalty, '(CFixedPoint)0'))]"
                                        texture = "gfx/interface/icons/generic_icons/goods_shortage.dds"
                                        tooltip = "GOODS_OUTPUT_PENALTY_TOOLTIP"
                                        parentanchor = left|vcenter
                                    }

                                    icon = {
                                        size = { 25 25 }
                                        visible = "[And(Not(Building.HasAnyInputShortage),GreaterThan_CFixedPoint(Building.GetInputShortagePenalty, '(CFixedPoint)0'))]"
                                        texture = "gfx/interface/icons/generic_icons/goods_shortage.dds"
                                        tooltip = "GOODS_OUTPUT_PENALTY_LINGERING_TOOLTIP"
                                        parentanchor = left|vcenter
                                    }

                                    textbox = {
                                        raw_text = "#bold [FixedPointToInt(Building.GetProduction(Goods.Self))|D]#!"
                                        visible = "[Not(GreaterThan_CFixedPoint(Building.GetInputShortagePenalty, '(CFixedPoint)0'))]"
                                        parentanchor = left|vcenter
                                        autoresize = yes
                                        align = left|nobaseline
                                        tooltip = "TOOLTIP_BUILDING_PRODUCES_UNITS_INFO"
                                    }

                                    textbox = {
                                        raw_text = "#bold #n [FixedPointToInt(Building.GetProduction(Goods.Self))|D]#!#!"
                                        visible = "[GreaterThan_CFixedPoint(Building.GetInputShortagePenalty, '(CFixedPoint)0')]"
                                        parentanchor = left|vcenter
                                        autoresize = yes
                                        align = left|nobaseline
                                        tooltip = "TOOLTIP_BUILDING_PRODUCES_UNITS_INFO"
                                    }
                                }

                                textbox = {
                                    raw_text = "#BOLD @money![FixedPointToInt(Building.GetProductionValue(Goods.Self))|*1]#! ([Goods.GetCompareIconAgainstBasePriceNoFormatting( Goods.GetStatePrice ) ])"
                                    autoresize = yes
                                    align = right|nobaseline
                                    parentanchor = right|vcenter
                                    position = { -10 0 }
                                    ### This tooltip blocks going to the locked tooltip of the good, therefore it is commented out
                                    #tooltip = "TOOLTIP_BUILDING_PRODUCES_VALUE_INFO"
                                }
                            }
                        }
                    }

                    ### modifiers
                    flowcontainer = {
                        parentanchor = hcenter
                        direction = vertical
                        spacing = 5
                        datamodel = "[Building.GetProducedModifiers.GetEntries]"
                        visible = "[Not(IsDataModelEmpty(Building.GetProducedModifiers.GetEntries))]"
                        item = {
                            container = {
                                maximumsize = { 250 -1 }
                                minimumsize = { 250 39 }

                                background = {
                                    using = entry_bg_simple
                                }

                                flowcontainer = {
                                    parentanchor = vcenter
                                    margin_left = 5
                                    icon = {
                                        size = { 25 25 }
                                        visible = "[And(Building.CanBeAffectedByInputShortage(ModifierEntry.Self),And(Building.HasAnyInputShortage,GreaterThan_CFixedPoint(Building.GetInputShortagePenalty, '(CFixedPoint)0')))]"
                                        texture = "gfx/interface/icons/generic_icons/goods_shortage.dds"
                                        tooltip = "GOODS_OUTPUT_PENALTY_TOOLTIP"
                                        parentanchor = vcenter
                                    }

                                    icon = {
                                        size = { 25 25 }
                                        visible = "[And(Building.CanBeAffectedByInputShortage(ModifierEntry.Self),And(Not(Building.HasAnyInputShortage),GreaterThan_CFixedPoint(Building.GetInputShortagePenalty, '(CFixedPoint)0')))]"
                                        texture = "gfx/interface/icons/generic_icons/goods_shortage.dds"
                                        tooltip = "GOODS_OUTPUT_PENALTY_LINGERING_TOOLTIP"
                                        parentanchor = vcenter
                                    }

                                    textbox = {
                                        text = "[ModifierEntry.GetName]"
                                        tooltip = "BUILDING_DETAILS_PRODUCED_MODIFIER_TOOLTIP"
                                        autoresize = yes
                                        multiline = yes
                                        align = left|nobaseline
                                        parentanchor = vcenter
                                        minimumsize = { 170 -1 }
                                        maximumsize = { 170 -1 }
                                        margin_left = 5
                                        margin_top = 5
                                        margin_bottom = 5
                                    }
                                }

                                textbox = {
                                    text = "[ModifierEntry.GetFormattedValue]"
                                    tooltip = "BUILDING_DETAILS_PRODUCED_MODIFIER_TOOLTIP"
                                    autoresize = yes
                                    multiline = yes
                                    align = right|nobaseline
                                    parentanchor = right|vcenter
                                    minimumsize = { 250 -1 }
                                    maximumsize = { 250 -1 }
                                    margin_right = 10
                                }
                            }
                        }
                    }

                    building_process_entry = {
                        tooltip = BUILDING_URBANIZATION_TOOLTIP

                        blockoverride "visible" {
                            visible = "[Building.ProvidesUrbanization]"
                        }

                        blockoverride "text" {
                            raw_text = "[concept_urbanization]"
                        }
                        blockoverride "text_right" {
                            raw_text = "#variable [Building.CalcUrbanizationProvided|+=]#!"
                        }
                    }
                }
            }
        }

        widget = { size = { 10 20 }}

        flowcontainer = {
            name = "input_output_modifiers"
            direction = vertical

            using = visible_if_produces


            divider_clean = {
                visible = "[Or(Not( StringIsEmpty( Building.GetInputMultDesc )), Not(And( StringIsEmpty(Building.GetThroughputDesc), EqualTo_CFixedPoint(Building.GetThroughputBonusCurrent, Building.GetThroughputBonusTarget) )))]"
            }

            widget = {
                size = { @panel_width 45 }
                parentanchor = hcenter
                visible = "[Or(Not( StringIsEmpty( Building.GetInputMultDesc )), Not(And( StringIsEmpty(Building.GetThroughputDesc), EqualTo_CFixedPoint(Building.GetThroughputBonusCurrent, Building.GetThroughputBonusTarget) )))]"

                ### consumption factor
                textbox = {
                    margin_left = 10
                    visible = "[Not( StringIsEmpty( Building.GetInputMultDesc ))]"
                    text = "INPUT_MULT"
                    tooltip = "INPUT_MULT_TOOLTIP"
                    autoresize = yes
                    default_format = "#title"
                    using = fontsize_large
                    parentanchor = vcenter
                    align = nobaseline
                }

                ### throughput
                textbox = {
                    margin_right = 10
                    visible = "[Not(And( StringIsEmpty(Building.GetThroughputDesc), EqualTo_CFixedPoint(Building.GetThroughputBonusCurrent, Building.GetThroughputBonusTarget) ))]"
                    text = "THROUGHPUT"
                    tooltip = "THROUGHPUT_TOOLTIP"
                    autoresize = yes
                    default_format = "#title"
                    using = fontsize_large
                    parentanchor = right|vcenter
                    align = right|nobaseline
                }
            }

        }
    }
}