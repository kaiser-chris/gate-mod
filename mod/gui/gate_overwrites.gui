#TODO: Fix this
template information_panels {
	add_wargoal_panel = {}
	battle_panel = {}
	battle_participants_panel = {}
	building_details_panel = {}
	commander_panel = {}
	military_formation_panel = {}
	country_panel = {}
	society_panel = {}
	culture_info_panel = {}
	decisions_panel = {}
	diplomatic_overview_panel = {}
	diplomatic_play_panel = {}
	election_panel = {}
	front_panel = {}
	goods_state_panel = {}
	goods_local_prices_panel = {}
	goods_usage_panel = {}
	goods_panel = {}
	interest_group_panel = {}
	journal_entry_panel = {}
	journal_panel = {}
	market_panel = {}
	naval_invasion_panel = {}
	panel_military = {}
	party_panel = {}
	pop_details_panel = {}
	pops_overview_panel = {}
	political_movement_panel = {}
	power_bloc_panel = {}
	power_bloc_formation_panel = {}
	religion_info_panel = {}
	sea_region_panel = {}
	state_population_panel = {}
	states_panel = {}
	sway_country_panel = {}
	war_panel = {}
	budget_panel = {}
	country_formation_panel = {}
	companies_panel = {}
	construction_panel = {}
	political_lobby_panel = {}
	compact_building_browser_panel = {}
	countries_panel = {}

	using = gate_panels
}

template gate_panels {
	gate_sidebar_panel = {}
	gate_technology_panel = {}
}

# Overwrites of base game
types overwrites {

	# Overwritten because:
	# Hide lines to technologies that are not shown
	type tech_tree_graph = zoomarea {
		name = "graph_zoomarea"
		size = { 100% 100% }

		background = {
			using = entry_header

			modify_texture = {
				texture = "gfx/interface/masks/fade_vertical_top.dds"
				spriteType = Corneredstretched
				spriteborder = { 0 0 }
				blend_mode = alphamultiply
			}
		}

		state = {
			name = "_zoom_changed"
			duration = 0.15
		}

		zoom = "[GetDefine('NGUI', 'TECH_TREE_INITIAL_ZOOM')]"
		zoom_step = 0.15
		zoom_min = 0.20
		zoom_max = 1
		draggable_by = left # Do not add 'middle' click here, otherwise you will re-introduce PRCAL-16945

		block "starting_pan_position" {}

		#scissor = yes

		zoomwidget = {

			container = {
				widget = {
					size = { 100% 100% }
					alpha = 0.15
					block "extra_lines" {}
				}

				container = { #Line Mech
					# These two widgets determine the margin between graph nodes
					widget = {
						name = "margin_top_left" # Do not change this name
						size = { 50 150 }
					}
					widget = {
						name = "margin_bottom_right" # Do not change this name
						size = { 70 170 }
					}

					# This widget tells the layout how to offset and space the lines
					widget = {
						name = "line_offset" # Do not change this name
						position = { 0 -10 } # Fixed offset (i.e. to compensate for line width)
						size = { 30 0 } # Spacing between edges
					}

					# Container for all the edges in the graph
					container = {
						name = "line_area" # Do not change this name

						block "datamodel_lines" {
							#datamodel = "[TechTreePanel.GetTechTreeLines]"
						}

						item = {
							container = {
								### CANNOT RESEARCH SPLINE
								techtree_spline = {
									# MODIFIED: Added TechTreeLine.GetTargetTech.ShouldShow(GetPlayer.Self) check
									visible = "[And3(Not(IsValid(TechTreeLine.GetTargetTech.Research(GetPlayer.Self))), Not(TechTreeLine.GetTargetTech.HasResearchedTech(GetPlayer.Self)), TechTreeLine.GetTargetTech.ShouldShow(GetPlayer.Self))]"
								}

								### IS RESEARCHING SPLINE
								techtree_spline = {
									# MODIFIED: Added TechTreeLine.GetTargetTech.ShouldShow(GetPlayer.Self) check
									visible = "[And(TechTreeLine.GetTargetTech.IsResearching(GetPlayer.Self), TechTreeLine.GetTargetTech.ShouldShow(GetPlayer.Self))]"
									blockoverride "tech_line_texture_border" {
										texture = "gfx/interface/tech_tree/tech_line_border_researching.dds"
									}
									blockoverride "tech_line_texture" {
										texture = "gfx/interface/tech_tree/tech_line_researching.dds"
									}
								}

								### HAS RESEARCHED SPLINE
								techtree_spline = {
									# MODIFIED: Added TechTreeLine.GetTargetTech.ShouldShow(GetPlayer.Self) check
									visible = "[And(TechTreeLine.GetTargetTech.HasResearchedTech(GetPlayer.Self), TechTreeLine.GetTargetTech.ShouldShow(GetPlayer.Self))]"
									blockoverride "tech_line_texture_border" {
										texture = "gfx/interface/tech_tree/tech_line_border_research_done.dds"
									}
									blockoverride "tech_line_texture" {
										texture = "gfx/interface/tech_tree/tech_line_research_done.dds"
									}
								}

								### CAN RESEARCH SPLINE
								techtree_spline = {
									# MODIFIED: Added TechTreeLine.GetTargetTech.ShouldShow(GetPlayer.Self) check
									visible = "[And(IsValid(TechTreeLine.GetTargetTech.Research(GetPlayer.Self)), TechTreeLine.GetTargetTech.ShouldShow(GetPlayer.Self))]"
								}

								### IS IN RESEARCH QUEUE SPLINE
								techtree_spline = {
									# MODIFIED: Added TechTreeLine.GetTargetTech.ShouldShow(GetPlayer.Self) check
									visible = "[And(TechTreeLine.GetTargetTech.IsInResearchQueue(GetPlayer.Self), TechTreeLine.GetTargetTech.ShouldShow(GetPlayer.Self))]"
									blockoverride "tech_line_texture_border" {
										texture = "gfx/interface/tech_tree/tech_line_border_researching.dds"
									}
									blockoverride "tech_line_texture" {
										texture = "gfx/interface/tech_tree/tech_line_researching.dds"
									}
								}
							}
						}
					}

					# Container for all the nodes in the graph
					container = {
						name = "node_area" # Do not change this name

						block "datamodel_items" {
							#datamodel = "[TechTreePanel.GetTechTreeItems]"
						}

						item = {
							widget = {
								size = { 465 150 }
								datacontext = "[TechTreeItem.GetTechnology]"
								position = "[TechTreeItem.GetPosition]"
								widgetid = "[TechTreeItem.GetKey]"
								visible = "[Technology.ShouldShow(GetPlayer.Self)]"

								tooltipwidget = {
									FancyTooltip_Technology_Tech_Tree = {}
								}

								### CAN RESEARCH
								technology = {
									visible = "[IsValid(Technology.Research(GetPlayer.Self))]"

									blockoverride "glow_animation" {}
								}

								### CANÂ´T RESEARCH
								technology = {
									visible = "[And(Technology.ShouldShow(GetPlayer.Self),Not(IsValid(Technology.Research(GetPlayer.Self))))]"

									blockoverride "glow_animation" {}

									blockoverride "round_frame" {
										button = {
											texture = "gfx/interface/backgrounds/round_frame_dec.dds"
											parentanchor = vcenter
											size = { 180 180 }
											alwaystransparent = yes
											enabled = no
											color = { 0.5 0.5 0.5 1 }
										}
									}

									blockoverride "name_background" {
										button = {
											size = { 100% 100% }

											background = {
												using = blurry_dark_background
											}

											enabled = no
											color = { 0.5 0.5 0.5 1 }
											alwaystransparent = yes
										}
									}

									blockoverride "enabled" {
										enabled = no
									}

									blockoverride "alpha" {
										alpha = 0.5
									}
								}

								### HAS RESEARCHED
								technology = {
									visible = "[Technology.HasResearchedTech(GetPlayer.Self)]"

									blockoverride "glow_animation" {}

									blockoverride "unlocks_alpha" {
										alpha = 0.7
									}
								}

								### CURRENTLY RESEARCHED
								technology = {
									visible = "[Technology.IsResearching(GetPlayer.Self)]"

									blockoverride "name_formatting" {
										default_format = "#header"
										using = look_at_me_text_animation
									}
								}

								### TECH PROGRESS
								container = {
									tooltip = "TECHNOLOGY_GAIN_BREAKDOWN"
									parentanchor = bottom|right
									position = { -20 -15 }
									visible = "[Or(And(GreaterThan_CFixedPoint(Technology.GetProgress(GetPlayer.Self), '(CFixedPoint)0'), Not(Technology.HasResearchedTech(GetPlayer.Self))), GreaterThan_CFixedPoint(GetPlayer.GetMinWeeklyTechnologyProgressForTech(Technology.Self), '(CFixedPoint)0'))]"

									default_progressbar_horizontal = {
										size = { 270 25 }
										parentanchor = hcenter
										blockoverride "values" {
											max = "[FixedPointToFloat(Technology.GetCost(GetPlayer.Self))]"
											value = "[FixedPointToFloat(Technology.GetProgress(GetPlayer.Self))]"
										}
										textbox = {
											text = "TECHNOLOGY_PROGRESS_WITH_GAIN"
											align = nobaseline
											parentanchor = center
											autoresize = yes
											using = fontsize_xl
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
