@panel_width_half = 270				# used to be 230
@tooltip_max_width = 550            # copied from tooltip.gui

types gate_shared {

    type gate_character = widget {
        block "character_context" {}

        block "character_size" {
            size = { @panel_width_half 290 }
        }

        widget = {
            size = { @panel_width_half 290 }
            parentanchor = hcenter

            # Character Tooltip
            tooltipwidget = {
                FancyTooltip_Character_Gate = {}
            }

            # Character Portrait
            character_portrait_large_torso = {
                position = { 0 0 }
                parentanchor = hcenter
                blockoverride "show_hat" {}
                blockoverride "tooltip" {}
                blockoverride "portrait_icons" {}
                blockoverride "portrait_button" {}
            }

            # Character Name
            default_header_clean_faded = {
                size = { 250 40 }
                position = { 0 256 }
                blockoverride "text" {}
                parentanchor = hcenter
                textbox = {
                    text = "[Character.GetFullNameNoFormatting]"
                    parentanchor = vcenter|hcenter
                    position = { 0 -2 }
                    autoresize = yes
                    max_width = @panel_width_half
                    using = fontsize_large
                }
            }

            # Character Opinion
            flowcontainer = {
                position = { 180 50 }
                margin = { 10 10 }
                tooltipwidget = {
                    RegularTooltip = {
                        blockoverride "text" {
                            text = "[Character.MakeScope.Var('com_opinion').GetFlagName]"
                        }
                    }
                }

                icon = {
                    size = { 40 40 }
                    texture = "gfx/interface/icons/ai_strategy_icons/progressive_agenda.dds"
                }

                background = {
                    texture = "gfx/interface/backgrounds/round_button_bg.dds"
                }
            }
        }
    }

    type gate_character_small = widget {
        block "character_context" {}

        block "character_size" {
            size = { 120 120 }
        }

        # Character Tooltip
        block "gate_character_tooltip" {
            tooltipwidget = {
                FancyTooltip_Character_Gate = {}
            }
        }

        widget = {
            size = { 120 120 }
            parentanchor = center

            # Character Portrait
            block "gate_character_portrait" {
                character_portrait_base_head = {
                    parentanchor = hcenter
                    size = { 120 120 }
                    blockoverride "portrait_size" {
                        size = { 120 120 }
                    }
                    blockoverride "icon_size" {
                        size = { 22 22 }
                    }

                    blockoverride "rank_icon" {}
                    blockoverride "show_hat" {}
                    blockoverride "tooltip" {}
                    blockoverride "portrait_icons" {}
                    blockoverride "portrait_button" {}
                }
            }

            # Character Opinion
            flowcontainer = {
                block "gate_opinion_visible" {
                    visible = yes
                }
                position = { 80 0 }
                margin = { 10 10 }
                tooltipwidget = {
                    RegularTooltip = {
                        blockoverride "text" {
                            text = "[Character.MakeScope.Var('com_opinion').GetFlagName]"
                        }
                    }
                }

                icon = {
                    size = { 30 30 }
                    texture = "gfx/interface/icons/ai_strategy_icons/progressive_agenda.dds"
                }

                background = {
                    texture = "gfx/interface/backgrounds/round_button_bg.dds"
                }
            }
        }
    }

    type FancyTooltip_Character_Gate = FancyTooltipWidgetType {
        blockoverride "text" {
            text = gg_character_tooltip
        }

        blockoverride "name" {
            text = CHARACTER_TOOLTIP_HEADER_NAME
        }

        blockoverride "type" {
            text = TOOLTIP_TYPE_CHARACTER
        }

        blockoverride "replace_icon" {
            character_portrait_small2 = {
                blockoverride "tooltip" {}
                blockoverride "portrait_frame" {}
                blockoverride "rank_icon" {
                    rank_icon = {
                        visible = "[Character.IsCommander]"
                        parentanchor = bottom|right
                        blockoverride "icon_size" {
                            size = { 26 26 }
                        }
                    }
                }
                parentanchor = center
            }
        }

        blockoverride "go_to_button_visibility" {
            visible = no
        }

        blockoverride "go_to_button_tooltip" {
            tooltip = "GO_TO_BUTTON_CHARACTER"
        }

        blockoverride "go_to_button_properties" {
            onclick = "[InformationPanelBar.OpenCommanderPanel(Character.AccessSelf)]"
        }

        blockoverride "go_to_button_properties" {
            onclick = "[InformationPanelBar.OpenCommanderPanel(Character.AccessSelf)]"
        }

        blockoverride "tooltip_content_after" {
            flowcontainer = {
                visible = "[Character.MakeScope.Var('magic_experience').IsSet]"
                direction = vertical
                spacing = 5
                margin_top = 10

                textbox = {
                    size = { 100% 20 }
                    text = gg_character_experience_header
                }
                # Novice
                default_progressbar_horizontal = {
                    minimumsize = { -1 20 }
                    maximumsize = { -1 20 }
                    visible = "[LessThan_CFixedPoint(Character.MakeScope.Var('magic_experience').GetValue, Character.MakeScope.ScriptValue('character_experienced_threshhold'))]"
                    tooltip = gg_character_experience_novice_tooltip

                    blockoverride "values" {
                        value = "[FixedPointToFloat(Character.MakeScope.Var('magic_experience').GetValue)]"
                        min = 0
                        max = 50
                    }
                    blockoverride "on_top_of_the_progressbar" {
                        textbox = {
                            size = { 100% 20 }
                            text = gg_character_experience_novice
                            align = center
                        }
                    }
                }
                # Experienced
                default_progressbar_horizontal = {
                    minimumsize = { -1 20 }
                    maximumsize = { -1 20 }
                    visible = "[And(
                                    GreaterThanOrEqualTo_CFixedPoint(Character.MakeScope.Var('magic_experience').GetValue, Character.MakeScope.ScriptValue('character_experienced_threshhold')),
                                    Not(GreaterThanOrEqualTo_CFixedPoint(Character.MakeScope.Var('magic_experience').GetValue, Character.MakeScope.ScriptValue('character_master_threshhold')))
                               )]"
                    tooltip = gg_character_experience_experienced_tooltip

                    blockoverride "values" {
                        value = "[Character.MakeScope.Var('magic_experience').GetValue]"
                        min = 50
                        max = 100
                    }
                    blockoverride "on_top_of_the_progressbar" {
                        textbox = {
                            size = { 100% 20 }
                            text = gg_character_experience_experienced
                            align = center
                        }
                    }
                }
                # Master
                default_progressbar_horizontal = {
                    minimumsize = { -1 20 }
                    maximumsize = { -1 20 }
                    visible = "[GreaterThanOrEqualTo_CFixedPoint(Character.MakeScope.Var('magic_experience').GetValue, Character.MakeScope.ScriptValue('character_master_threshhold'))]"
                    tooltip = gg_character_experience_master_tooltip

                    blockoverride "values" {
                        value = 100
                        min = 0
                        max = 100
                    }
                    blockoverride "on_top_of_the_progressbar" {
                        textbox = {
                            size = { 100% 20 }
                            text = gg_character_experience_master
                            align = center
                        }
                    }
                }
            }

            DefaultTooltipTextBox = {
                visible = "[InDebugMode]"
                text = "[Character.GetDebugDesc]"
                margin_bottom = 0
                autoresize = yes
                multiline = yes
                maximumsize = { 550 -1 }
                fonttintcolor = "[TooltipInfo.GetTintColor]"
            }
        }
    }

    type gate_mana_density_colored = widget {
        using = clickthrough_blocker
        tooltip = gg_map_marker_mana_density_tooltip

        block "mana_density_size" {
            size = { 70 45 }
        }

        block "mana_density_visibility" {
            visible = no
        }

        gate_mana_density = {
            blockoverride "visibility" {
                visible = "[LessThan_CFixedPoint(State.AccessStateRegion.MakeScope.Var('mana_density').GetValue, State.MakeScope.ScriptValue('medium_mana_density_threshhold'))]"
            }
            blockoverride "background_color" {
                texture = "gfx/interface/icons/gui_icons/low_mana_density.dds"
                tintcolor = { 0.6 0.6 0.6 1 }
            }
        }
        gate_mana_density = {
            blockoverride "visibility" {
                visible = "[And(
								GreaterThanOrEqualTo_CFixedPoint(State.AccessStateRegion.MakeScope.Var('mana_density').GetValue, State.MakeScope.ScriptValue('medium_mana_density_threshhold')),
								LessThan_CFixedPoint(State.MakeScope.Var('mana_density').GetValue, State.MakeScope.ScriptValue('high_mana_density_threshhold'))
							)]"
            }
            blockoverride "background_color" {
                texture = "gfx/interface/icons/gui_icons/mid_mana_density.dds"
                tintcolor = { 0.6 0.6 0.6 1 }
            }
        }
        gate_mana_density = {
            blockoverride "visibility" {
                visible = "[GreaterThanOrEqualTo_CFixedPoint(State.AccessStateRegion.MakeScope.Var('mana_density').GetValue, State.MakeScope.ScriptValue('high_mana_density_threshhold'))]"
            }
            blockoverride "background_color" {
                texture = "gfx/interface/icons/gui_icons/high_mana_density.dds"
                tintcolor = { 0.6 0.6 0.6 1 }
            }
        }
    }

    type gate_mana_density = widget {
        block "size" {
            size = { 100% 100% }
        }

        block "visibility" {}

        textbox = {
            using = frame_small
            size = { 100% 100% }
            text = gg_map_marker_mana_density
            align = center
            default_format = "#header"
            block "font_size" {}
        }

        background = {
            using = frame_small_mask
            spriteType = CorneredTiled
            spriteborder = { 48 48 }
            texture_density = 2
            block "background_color" {
                texture = "gfx/interface/tooltip/tooltip_bg.dds"
            }

            modify_texture = {
                texture = "gfx/interface/backgrounds/default_bg_shading.dds"
                spriteType = Corneredstretched
                spriteborder = { 0 0 }
                blend_mode = overlay
            }
            modify_texture = {
                texture = "gfx/interface/textures/velvet_texture.dds"
                spriteType = Corneredtiled
                texture_density = 2
                spriteborder = { 0 0 }
                blend_mode = overlay
            }
            modify_texture = {
                texture = "gfx/interface/textures/cloth_texture.dds"
                spriteType = Corneredtiled
                texture_density = 2
                spriteborder = { 0 0 }
                blend_mode = overlay
                alpha = 0.15
            }
        }
    }

    # Green progressbar that indicates an upward trend
    type changed_value_increased_progressbar_horizontal_green = progressbar_properties {
        blockoverride "progressbar" {
            progressbar = {
                noprogresstexture = "gfx/interface/icons/generic_icons/transparent.dds"
                progresstexture = "gfx/interface/progressbar/progressbar_green.dds"
                size = { 100% 100% }
                spriteType = Corneredtiled
                spriteborder = { 4 4 }
                texture_density = 2
                skip_initial_animation = yes

                block "values" {
                    min = 0
                    max = 1
                    block "start_value" {}
                }

                direction = horizontal
                using = progressbar_changed_animation
                animate_negative_changes = yes
                using = progressbar_texture_properties

                marker = {
                    widget = {
                        size = { 100% 100% }

                        icon = {
                            texture = "gfx/interface/progressbar/progressbar_green_glow.dds"
                            size = { 30 100% }
                            widgetanchor = right
                            alpha = 0.3
                            using = progressbar_texture_properties

                            ### line
                            icon = {
                                texture = "gfx/interface/progressbar/progressbar_green_glow_line.dds"
                                size = { 3 100% }
                                parentanchor = right
                                spriteType = Corneredtiled
                                spriteborder = { 0 0 }
                            }
                        }

                        icon = {
                            texture = "gfx/interface/progressbar/progressbar_green.dds"
                            size = { 100% 100% }
                            spriteType = Corneredtiled
                            spriteborder = { 4 4 }
                            texture_density = 2
                            shaderfile = "gfx/FX/pdxgui_repeat_texture.shader"
                            widgetanchor = right

                            modify_texture = {
                                texture = "gfx/interface/backgrounds/light_bg.dds"
                                spriteType = CorneredTiled
                                spriteborder = { 6 6 }
                                texture_density = 2
                                blend_mode = overlay
                            }

                            modify_texture = {
                                name = arrow_animation
                                texture = "gfx/interface/progressbar/progressbar_arrow.dds"
                                spriteType = Corneredtiled
                                spriteborder = { 0 0 }
                                block "arrow_texture_density" {
                                    texture_density = 10 #use to match height of progressbar
                                }
                                translate_uv = { 0 0 }
                                blend_mode = alphamultiply
                            }

                            state = {
                                trigger_on_create = yes
                                name = arrow_animation_1
                                next = arrow_animation_2
                                duration = 1

                                modify_texture = {
                                    name = arrow_animation
                                    translate_uv = { -1 0 }
                                }
                            }
                            state = {
                                name = arrow_animation_2
                                next = arrow_animation_1
                                duration = 0

                                modify_texture = {
                                    name = arrow_animation
                                    translate_uv = { 0 0 }
                                }
                            }
                        }
                    }
                }
            }
            block "second_progressbar" {
                progressbar = {
                    noprogresstexture = "gfx/interface/icons/generic_icons/transparent.dds"
                    progresstexture = "gfx/interface/progressbar/progressbar_default.dds"
                    size = { 100% 100% }
                    spriteType = Corneredtiled
                    spriteborder = { 4 4 }
                    texture_density = 2
                    skip_initial_animation = yes

                    min = 0
                    max = 1
                    block "new_value" {}

                    direction = horizontal
                    using = progressbar_changed_animation
                    animate_negative_changes = yes
                    using = progressbar_marker_indicator
                    using = progressbar_texture_properties
                }
            }
        }
    }

    # Red progressbar that indicates an downward trend
    type changed_value_decreased_progressbar_horizontal_bad = progressbar_properties {

        blockoverride "progressbar" {
            progressbar = {
                noprogresstexture = "gfx/interface/icons/generic_icons/transparent.dds"
                progresstexture = "gfx/interface/progressbar/progressbar_bad.dds"
                size = { 100% 100% }
                spriteType = Corneredtiled
                spriteborder = { 4 4 }
                texture_density = 2
                skip_initial_animation = yes

                block "values" {
                    min = 0
                    max = 1
                    block "new_value" {}
                }

                direction = horizontal
                using = progressbar_changed_animation
                animate_negative_changes = yes
                using = progressbar_marker_indicator
                using = progressbar_texture_properties

                marker = {
                    widget = {
                        size = { 100% 100% }

                        icon = {
                            texture = "gfx/interface/progressbar/progressbar_bad_glow.dds"
                            size = { 30 100% }
                            widgetanchor = right
                            alpha = 0.3
                            using = progressbar_texture_properties

                            ### line
                            icon = {
                                texture = "gfx/interface/progressbar/progressbar_bad_glow_line.dds"
                                size = { 3 100% }
                                parentanchor = right
                                spriteType = Corneredtiled
                                spriteborder = { 0 0 }
                            }
                        }

                        icon = {
                            texture = "gfx/interface/progressbar/progressbar_bad.dds"
                            size = { 100% 100% }
                            spriteType = Corneredtiled
                            spriteborder = { 4 4 }
                            texture_density = 2
                            shaderfile = "gfx/FX/pdxgui_repeat_texture.shader"
                            widgetanchor = right

                            modify_texture = {
                                texture = "gfx/interface/backgrounds/light_bg.dds"
                                spriteType = CorneredTiled
                                spriteborder = { 6 6 }
                                texture_density = 2
                                blend_mode = overlay
                            }

                            modify_texture = {
                                name = arrow_animation
                                texture = "gfx/interface/progressbar/progressbar_arrow.dds"
                                spriteType = Corneredtiled
                                spriteborder = { 0 0 }
                                block "arrow_texture_density" {
                                    texture_density = 10 #use to match height of progressbar
                                }
                                translate_uv = { 0 0 }
                                blend_mode = alphamultiply
                                mirror = horizontal
                            }

                            state = {
                                trigger_on_create = yes
                                name = arrow_animation_1
                                next = arrow_animation_2
                                duration = 1

                                modify_texture = {
                                    name = arrow_animation
                                    translate_uv = { -1 0 }
                                }
                            }
                            state = {
                                name = arrow_animation_2
                                next = arrow_animation_1
                                duration = 0

                                modify_texture = {
                                    name = arrow_animation
                                    translate_uv = { 0 0 }
                                }
                            }
                        }
                    }
                }
            }
            block "second_progressbar" {
                progressbar = {
                    noprogresstexture = "gfx/interface/icons/generic_icons/transparent.dds"
                    progresstexture = "gfx/interface/progressbar/progressbar_default.dds"
                    size = { 100% 100% }
                    spriteType = Corneredtiled
                    spriteborder = { 4 4 }
                    texture_density = 2
                    skip_initial_animation = yes

                    min = 0
                    max = 1
                    block "start_value" {}

                    direction = horizontal
                    using = progressbar_changed_animation
                    animate_negative_changes = yes
                    using = progressbar_marker_indicator
                    using = progressbar_texture_properties
                }
            }
        }
    }

    type missing_dependency_popup = widget {
        size = { 100% 100% }
        using = clickthrough_blocker

        enabled = "[GetMetaPlayer.GetPlayedOrObservedCountry.IsValid]"

        background = {
            using = dark_area
            alpha = 0.9
        }

        block "visible" {
            visible = "[And4(
                            Not(GetScriptedGui('gate_dependency_cmf').IsValid(GuiScope.End)),
                            IsInGame,
                            Not(IsPauseMenuShown),
                            Not(IsGameOverScreenShown)
                       )]"
        }

        window = {
            layer = popups
            using = clickthrough_blocker
            filter_mouse = all
            allow_outside = yes
            parentanchor = hcenter|vcenter

            size = { 700 400 }


            widget = {
                size = { 100% 100% }

                background = {
                    texture = "gfx/interface/backgrounds/popup_bg.dds"
                    spriteType = Corneredstretched
                    spriteborder = { 90 90 }
                    texture_density = 2

                    modify_texture = {
                        texture = "gfx/interface/backgrounds/default_bg_shading.dds"
                        spriteType = Corneredstretched
                        spriteborder = { 0 0 }
                        blend_mode = overlay
                    }
                    modify_texture = {
                        using = texture_velvet
                    }
                }
            }

            ### HEADER
            widget = {
                size = { 100% 82 }

                popup_top_header = {}

                textbox = {
                    block "first_line_position" {
                        position = { 0 24 }
                    }
                    size = { 75% 40 }
                    block "title" {
                        text = gg_missing_dependency_header
                    }
                    elide = right
                    fontsize_min = 14
                    parentanchor = hcenter
                    align = hcenter|nobaseline
                    using = header_font
                    using = header_font_size
                    default_format = "#header"
                }

                block "second_line" {}
            }

            ### FRAME
            popup_bg_frame = {}

            ### Actual stuff
            textbox = {
                block "body" {
                    text = gg_missing_dependency_body
                }
                position = { 30 90 }
                size = { 640 280 }
                parentanchor = top
                align = top|left
                elide = right
                multiline = yes
                using = fontsize_large
            }

            #Close button
            button_icon_round = {
                parentanchor = top|right
                size = { 42 42 }
                position = { -5 13 }

                enabled = no
                tooltip = gg_missing_dependency_tooltip

                blockoverride "icon" {
                    texture = "gfx/interface/buttons/button_icons/close.dds"
                }
                blockoverride "icon_size" {
                    size = { 100% 100% }
                }
            }
        }
    }

    type gate_building_details = flowcontainer {
        direction = vertical
        using = default_list_position
        margin_bottom = 10

        top_illu = {
            blockoverride "illu" {
                texture = "[Building.GetBuildingType.GetBackground]"
                fittype = start
                alpha = 0.7
            }
            minimumsize = { 555 -1 }

            flowcontainer = {
                resizeparent = yes
                parentanchor = hcenter
                margin_top = 15
                margin_bottom = 15
                minimumsize = { 540 147 }

                ### BUILDING ICON
                button = {
                    tooltipwidget = {
                        FancyTooltip_Building = {}
                    }
                    onrightclick = "[RightClickMenuManager.ShowForBuilding(Building.AccessSelf)]"
                    size = { 115 115 }

                    icon = {
                        alpha = "[TransparentIfFalse(Building.IsActive)]"
                        texture = "[Building.GetIcon]"
                        size = { 100% 100% }

                        icon = {
                            visible = "[Building.IsAutoDownsizing]"
                            tooltip = "[Building.GetAutoDownsizeTooltip]"
                            position = { 5 5 }
                            size = { 30 30 }
                            texture = "gfx/interface/production_methods/auto_downsize.dds"
                        }
                    }

                    icon = {
                        visible = "[And( GreaterThan_int32( Building.GetExpansionLevel, '(int32)0'), Not( Building.IsActive ))]"
                        size = { 100% 100% }
                        texture = "gfx/interface/icons/generic_icons/inactive_building.dds"
                    }
                }
            }

            vbox = {
                margin = { 0 20 }
                ### DOWNSIZE / EXPAND
                building_level_controls = {
                    blockoverride "controller_size" {
                        size = { 130 35 }
                    }
                }

                ### BUILD PROGRESS
                hbox = {
                    visible = "[Building.HasConstructionQueued]"

                    default_progressbar_horizontal = {
                        tooltip = "BUILDING_PROGRESS_TOOLTIP"
                        size = { 110 5 }

                        blockoverride "values" {
                            value = "[Building.GetConstructionProgressPercentage]"
                            min = 0
                            max = 1
                        }
                    }
                }

                building_progressbars = {
                    blockoverride "progressbar_size" {
                        size = { 200 26 }
                    }
                }
            }

            flowcontainer = {
                visible = "[GetScriptedGui('sgui_gate_research_pm').IsValid(GuiScope.SetRoot(Country.MakeScope).End)]"
                parentanchor = vcenter|right
                margin_left = 2

                condensed_building_information_pms = {
                    blockoverride "pms_slot_sizes" {
                        addcolumn = 72
                        addrow = 70
                    }
                    blockoverride "pms_minimumsize" {
                        minimumsize = { 104 -1 }
                    }
                    blockoverride "pms_item_size" {
                        size = { 70 70 }
                    }
                }
            }
        }

        divider_decorative = {}
        widget = { size = { 5 5 } }

        ### PROCESS
        flowcontainer = {
            using = default_list_position
            direction = vertical
            minimumsize = { 540 -1 }

            ### list
            container = {
                minimumsize = { 540 -1 }
                parentanchor = hcenter

                ### left
                textbox = {
                    parentanchor = vcenter
                    margin_left = 20
                    align =  nobaseline
                    using = empty_state_text_properties
                    visible = "[Not(Building.IsActive)]"
                    text = "BUILDING_INACTIVE_CONSUMPTION_EMPTY_STATE"
                    multiline = yes
                    max_width = 250
                    min_width = 250
                    autoresize = yes
                }

                flowcontainer = {
                    name = "tutorial_highlight_expenses"
                    direction = vertical
                    spacing = 5
                    parentanchor = left|vcenter
                    minimumsize = { 250 -1 }
                    ignoreinvisible = yes
                    visible = "[Building.IsActive]"

                    ### goods
                    flowcontainer = {
                        parentanchor = hcenter
                        direction = vertical
                        datamodel = "[Building.AccessConsumedGoods]"

                        item = {
                            widget = {
                                size = { 250 44 }
                                name = "tutorial_highlight_goods"
                                tooltipwidget = {
                                    FancyTooltip_Goods = {}
                                }

                                button = {
                                    size = { 100% 40 }
                                    parentanchor = vcenter
                                    using = default_button
                                    onclick = "[InformationPanelBar.OpenGoodsStatePanel(Building.GetState, Goods.Self)]"
                                    onrightclick = "[RightClickMenuManager.ShowForGoods(Goods.AccessSelf)]"
                                }


                                icon = {
                                    size = { 50 50 }
                                    texture = "[Goods.GetTexture]"
                                    position = { 3 0 }
                                    parentanchor = left|vcenter
                                }

                                flowcontainer = {
                                    parentanchor = left|vcenter
                                    spacing = 3
                                    margin_left = 50
                                    margin_top = 7

                                    icon = {
                                        size = { 25 25 }
                                        visible = "[And(Not(Building.HasMaximumInputShortage(Goods.Self)),Building.HasInputShortage(Goods.Self))]"
                                        texture = "gfx/interface/icons/generic_icons/goods_shortage.dds"
                                        tooltip = "GOODS_INPUT_SHORTAGE_TOOLTIP"
                                        parentanchor = left|vcenter
                                    }

                                    icon = {
                                        size = { 25 25 }
                                        visible = "[Building.HasMaximumInputShortage(Goods.Self)]"
                                        texture = "gfx/interface/icons/generic_icons/goods_shortage.dds"
                                        tooltip = "GOODS_INPUT_SHORTAGE_MAX_TOOLTIP"
                                        parentanchor = left|vcenter
                                    }

                                    textbox = {
                                        raw_text = "#bold [FixedPointToInt(Building.GetConsumption(Goods.Self))|D]#!"
                                        visible = "[Not(Building.HasInputShortage(Goods.Self))]"
                                        autoresize = yes
                                        parentanchor = left|vcenter
                                        widgetanchor = left|vcenter
                                        align = left|nobaseline
                                        tooltip = "TOOLTIP_BUILDING_USES_UNITS_INFO"
                                    }

                                    textbox = {
                                        raw_text = "#bold #n [FixedPointToInt(Building.GetConsumption(Goods.Self))|D]#!#!"
                                        visible = "[Building.HasInputShortage(Goods.Self)]"
                                        autoresize = yes
                                        parentanchor = left|vcenter
                                        widgetanchor = left|vcenter
                                        align = left|nobaseline
                                        tooltip = "TOOLTIP_BUILDING_USES_UNITS_INFO"
                                    }
                                }

                                textbox = {
                                    raw_text = "#BOLD @money![FixedPointToInt(Building.GetConsumptionValue(Goods.Self))|1*]#! ([Goods.GetCompareIconAgainstBasePriceNoFormatting( Goods.GetStatePrice )])"
                                    position = { -10 0 }
                                    autoresize = yes
                                    align = right|nobaseline
                                    parentanchor = right|vcenter
                                    widgetanchor = right|vcenter
                                    ### This tooltip blocks going to the locked tooltip of the good, therefore it is commented out
                                    #tooltip = "TOOLTIP_BUILDING_USES_VALUE_INFO"
                                }
                            }
                        }
                    }

                    ### wages
                    building_process_entry = {
                        blockoverride "visible" {
                            visible = "[GreaterThan_CFixedPoint(Building.GetLastWagesExpenses, '(CFixedPoint)0')]"
                        }
                        blockoverride "text" {
                            text = "WAGES"
                        }
                        blockoverride "text_right" {
                            raw_text = "#variable @money![Building.GetLastWagesExpenses|K]#!"
                            tooltip = "[Building.GetLastWagesExpensesDesc]"
                        }
                    }

                    ### slave upkeep
                    building_process_entry = {
                        blockoverride "visible" {
                            visible = "[Or( Building.HasSlaves, GreaterThan_CFixedPoint(Building.GetLastSlaveUpkeep, '(CFixedPoint)0') )]"
                        }
                        blockoverride "text" {
                            text = "SLAVE_UPKEEP"
                            tooltip = "[Building.GetLastSlaveUpkeepDesc]"
                        }
                        blockoverride "text_right" {
                            raw_text = "#variable @money![Building.GetLastSlaveUpkeep|K]#!"
                            tooltip = "[Building.GetLastSlaveUpkeepDesc]"
                        }
                    }

                    ### tariffs
                    building_process_entry = {
                        blockoverride "visible" {
                            visible = "[GreaterThan_CFixedPoint(Building.GetTariffsPaid, '(CFixedPoint)0')]"
                        }
                        blockoverride "text" {
                            text = "[concept_tariffs]"
                        }
                        blockoverride "text_right" {
                            raw_text = "#variable @money![Building.GetTariffsPaid|K]#!"
                        }
                    }

                    ### infrastructure
                    building_process_entry = {
                        tooltip = BUILDING_INFRA_USAGE_TOOLTIP

                        blockoverride "visible" {
                            visible = "[Building.UsesInfrastructure]"
                        }
                        blockoverride "text" {
                            text = "[concept_infrastructure_usage]"
                        }
                        blockoverride "text_right" {
                            raw_text = "#variable [Building.CalcInfrastructureUsage|=0]#!"
                        }
                    }
                }

                ### center arrow
                icon = {
                    size = { 30 30 }
                    texture = "gfx/interface/icons/generic_icons/turns_into.dds"
                    parentanchor = center
                    alpha = "[TransparentIfFalse(Building.IsActive)]"

                    using = visible_if_produces
                }

                ### right
                flowcontainer = {
                    name = "tutorial_highlight_revenues"
                    direction = vertical
                    spacing = 5
                    minimumsize = { 250 -1 }
                    parentanchor = right|vcenter
                    ignoreinvisible = yes
                    alpha = "[TransparentIfFalse(Building.IsActive)]"

                    ### goods
                    flowcontainer = {
                        parentanchor = hcenter
                        direction = vertical
                        datamodel = "[Building.AccessProducedGoods]"

                        item = {
                            widget = {
                                size = { 250 44 }
                                tooltipwidget = {
                                    FancyTooltip_Goods = {}
                                }

                                button = {
                                    size = { 100% 40 }
                                    parentanchor = vcenter
                                    using = default_button
                                    onclick = "[InformationPanelBar.OpenGoodsStatePanel(Building.GetState, Goods.Self)]"
                                    onrightclick = "[RightClickMenuManager.ShowForGoods(Goods.AccessSelf)]"
                                }

                                icon = {
                                    size = { 50 50 }
                                    texture = "[Goods.GetTexture]"
                                    position = { 3 0 }
                                    parentanchor = left|vcenter
                                }

                                flowcontainer = {
                                    parentanchor = left|vcenter
                                    spacing = 3
                                    margin_left = 50
                                    margin_top = 7

                                    icon = {
                                        size = { 25 25 }
                                        visible = "[And(Building.HasAnyInputShortage,GreaterThan_CFixedPoint(Building.GetInputShortagePenalty, '(CFixedPoint)0'))]"
                                        texture = "gfx/interface/icons/generic_icons/goods_shortage.dds"
                                        tooltip = "GOODS_OUTPUT_PENALTY_TOOLTIP"
                                        parentanchor = left|vcenter
                                    }

                                    icon = {
                                        size = { 25 25 }
                                        visible = "[And(Not(Building.HasAnyInputShortage),GreaterThan_CFixedPoint(Building.GetInputShortagePenalty, '(CFixedPoint)0'))]"
                                        texture = "gfx/interface/icons/generic_icons/goods_shortage.dds"
                                        tooltip = "GOODS_OUTPUT_PENALTY_LINGERING_TOOLTIP"
                                        parentanchor = left|vcenter
                                    }

                                    textbox = {
                                        raw_text = "#bold [FixedPointToInt(Building.GetProduction(Goods.Self))|D]#!"
                                        visible = "[Not(GreaterThan_CFixedPoint(Building.GetInputShortagePenalty, '(CFixedPoint)0'))]"
                                        parentanchor = left|vcenter
                                        autoresize = yes
                                        align = left|nobaseline
                                        tooltip = "TOOLTIP_BUILDING_PRODUCES_UNITS_INFO"
                                    }

                                    textbox = {
                                        raw_text = "#bold #n [FixedPointToInt(Building.GetProduction(Goods.Self))|D]#!#!"
                                        visible = "[GreaterThan_CFixedPoint(Building.GetInputShortagePenalty, '(CFixedPoint)0')]"
                                        parentanchor = left|vcenter
                                        autoresize = yes
                                        align = left|nobaseline
                                        tooltip = "TOOLTIP_BUILDING_PRODUCES_UNITS_INFO"
                                    }
                                }

                                textbox = {
                                    raw_text = "#BOLD @money![FixedPointToInt(Building.GetProductionValue(Goods.Self))|*1]#! ([Goods.GetCompareIconAgainstBasePriceNoFormatting( Goods.GetStatePrice ) ])"
                                    autoresize = yes
                                    align = right|nobaseline
                                    parentanchor = right|vcenter
                                    position = { -10 0 }
                                    ### This tooltip blocks going to the locked tooltip of the good, therefore it is commented out
                                    #tooltip = "TOOLTIP_BUILDING_PRODUCES_VALUE_INFO"
                                }
                            }
                        }
                    }

                    ### modifiers
                    flowcontainer = {
                        parentanchor = hcenter
                        direction = vertical
                        spacing = 5
                        datamodel = "[Building.GetProducedModifiers.GetEntries]"
                        visible = "[Not(IsDataModelEmpty(Building.GetProducedModifiers.GetEntries))]"
                        item = {
                            container = {
                                maximumsize = { 250 -1 }
                                minimumsize = { 250 39 }

                                background = {
                                    using = entry_bg_simple
                                }

                                flowcontainer = {
                                    parentanchor = vcenter
                                    margin_left = 5
                                    icon = {
                                        size = { 25 25 }
                                        visible = "[And(Building.CanBeAffectedByInputShortage(ModifierEntry.Self),And(Building.HasAnyInputShortage,GreaterThan_CFixedPoint(Building.GetInputShortagePenalty, '(CFixedPoint)0')))]"
                                        texture = "gfx/interface/icons/generic_icons/goods_shortage.dds"
                                        tooltip = "GOODS_OUTPUT_PENALTY_TOOLTIP"
                                        parentanchor = vcenter
                                    }

                                    icon = {
                                        size = { 25 25 }
                                        visible = "[And(Building.CanBeAffectedByInputShortage(ModifierEntry.Self),And(Not(Building.HasAnyInputShortage),GreaterThan_CFixedPoint(Building.GetInputShortagePenalty, '(CFixedPoint)0')))]"
                                        texture = "gfx/interface/icons/generic_icons/goods_shortage.dds"
                                        tooltip = "GOODS_OUTPUT_PENALTY_LINGERING_TOOLTIP"
                                        parentanchor = vcenter
                                    }

                                    textbox = {
                                        text = "[ModifierEntry.GetName]"
                                        tooltip = "BUILDING_DETAILS_PRODUCED_MODIFIER_TOOLTIP"
                                        autoresize = yes
                                        multiline = yes
                                        align = left|nobaseline
                                        parentanchor = vcenter
                                        minimumsize = { 170 -1 }
                                        maximumsize = { 170 -1 }
                                        margin_left = 5
                                        margin_top = 5
                                        margin_bottom = 5
                                    }
                                }

                                textbox = {
                                    text = "[ModifierEntry.GetFormattedValue]"
                                    tooltip = "BUILDING_DETAILS_PRODUCED_MODIFIER_TOOLTIP"
                                    autoresize = yes
                                    multiline = yes
                                    align = right|nobaseline
                                    parentanchor = right|vcenter
                                    minimumsize = { 250 -1 }
                                    maximumsize = { 250 -1 }
                                    margin_right = 10
                                }
                            }
                        }
                    }

                    building_process_entry = {
                        tooltip = BUILDING_URBANIZATION_TOOLTIP

                        blockoverride "visible" {
                            visible = "[Building.ProvidesUrbanization]"
                        }

                        blockoverride "text" {
                            raw_text = "[concept_urbanization]"
                        }
                        blockoverride "text_right" {
                            raw_text = "#variable [Building.CalcUrbanizationProvided|+=]#!"
                        }
                    }
                }
            }
        }

        widget = { size = { 10 20 }}

        flowcontainer = {
            name = "input_output_modifiers"
            direction = vertical

            using = visible_if_produces


            divider_clean = {
                visible = "[Or(Not( StringIsEmpty( Building.GetInputMultDesc )), Not(And( StringIsEmpty(Building.GetThroughputDesc), EqualTo_CFixedPoint(Building.GetThroughputBonusCurrent, Building.GetThroughputBonusTarget) )))]"
            }

            widget = {
                size = { 540 45 }
                parentanchor = hcenter
                visible = "[Or(Not( StringIsEmpty( Building.GetInputMultDesc )), Not(And( StringIsEmpty(Building.GetThroughputDesc), EqualTo_CFixedPoint(Building.GetThroughputBonusCurrent, Building.GetThroughputBonusTarget) )))]"

                ### consumption factor
                textbox = {
                    margin_left = 10
                    visible = "[Not( StringIsEmpty( Building.GetInputMultDesc ))]"
                    text = "INPUT_MULT"
                    tooltip = "INPUT_MULT_TOOLTIP"
                    autoresize = yes
                    default_format = "#title"
                    using = fontsize_large
                    parentanchor = vcenter
                    align = nobaseline
                }

                ### throughput
                textbox = {
                    margin_right = 10
                    visible = "[Not(And( StringIsEmpty(Building.GetThroughputDesc), EqualTo_CFixedPoint(Building.GetThroughputBonusCurrent, Building.GetThroughputBonusTarget) ))]"
                    text = "THROUGHPUT"
                    tooltip = "THROUGHPUT_TOOLTIP"
                    autoresize = yes
                    default_format = "#title"
                    using = fontsize_large
                    parentanchor = right|vcenter
                    align = right|nobaseline
                }
            }

        }
    }

}