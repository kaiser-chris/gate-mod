calculate_magic_research = {
	if = {
		limit = {
			is_magic_country = yes
		}

		# Banking
		if = {
			limit = {
				has_variable = magic_innovation
			}
			change_variable = {
				name = magic_innovation
				add = gate_magic_innovation
			}
		}
		else = {
			set_variable = {
				name = magic_innovation
				value = gate_magic_innovation
			}
		}

		clamp_variable = {
			name = magic_innovation
			min = 0
			max = global_var:magic_innovation_bank_max
		}
	}
}

# Research Institutes can only exist in capital states
gate_cleanup_research_institutes = {
	every_state = {
		limit = {
			is_capital = no
			has_building = building_magic_research_institute
		}
		remove_building = building_magic_research_institute
	}
}

reset_research_institute_pm = {
	if = {
		limit = {
			capital = {
				has_building = building_magic_research_institute
			}
		}
		if = {
			limit = {
				NOT = {
					has_variable = magic_researcher
				}
				capital = {
					any_scope_building = {
						is_building_type = building_magic_research_institute
						NOT = {
							has_active_production_method = pm_no_researcher
						}
					}
				}
			}
			activate_production_method = {
				building_type = building_magic_research_institute
				production_method = pm_no_researcher
			}
		}
		else_if = {
			limit = {
				var:magic_researcher ?= {
					has_variable = magic_experience
					var:magic_experience >= character_master_threshhold
				}
				capital = {
					any_scope_building = {
						is_building_type = building_magic_research_institute
						NOT = {
							has_active_production_method = pm_archmage_researcher
						}
					}
				}
			}
			activate_production_method = {
				building_type = building_magic_research_institute
				production_method = pm_archmage_researcher
			}
		}
		else_if = {
			limit = {
				var:magic_researcher ?= {
					has_variable = magic_experience
					var:magic_experience >= character_experienced_threshhold
				}
				capital = {
					any_scope_building = {
						is_building_type = building_magic_research_institute
						NOT = {
							has_active_production_method = pm_experienced_researcher
						}
					}
				}
			}
			activate_production_method = {
				building_type = building_magic_research_institute
				production_method = pm_experienced_researcher
			}
		}
		else_if = {
			limit = {
				capital = {
					any_scope_building = {
						is_building_type = building_magic_research_institute
						NOT = {
							has_active_production_method = pm_novice_researcher
						}
					}
				}
			}
			activate_production_method = {
				building_type = building_magic_research_institute
				production_method = pm_novice_researcher
			}
		}
	}
}

make_magic_researcher_busy = {
	var:magic_researcher ?= {
		set_character_busy_and_immortal = yes
		set_variable = {
			name = com_opinion
			value = flag:character_opinion_magic_researcher_busy
		}
	}
}

make_magic_researcher_not_busy = {
	var:magic_researcher ?= {
		set_character_busy_and_immortal = no
		set_variable = {
			name = com_opinion
			value = flag:character_opinion_magic_researcher
		}
	}
}

calculate_researcher_experience = {
	var:magic_researcher ?= {
		if = {
			limit = {
				has_variable = magic_experience
				var:magic_experience < character_experienced_maximum
			}
			save_temporary_scope_value_as = {
				name = prev_exp
				value = var:magic_experience
			}
			change_variable = {
				name = magic_experience
				add = {
					integer_range = {
						min = 1
						max = 2
					}
				}
			}
			clamp_variable = {
				name = magic_experience
				min = character_experienced_minimum
				max = character_experienced_maximum
			}
			if = {
				limit = {
					OR = {
						AND = {
							var:magic_experience >= character_experienced_threshhold
							scope:prev_exp < character_experienced_threshhold
						}
						AND = {
							var:magic_experience >= character_master_threshhold
							scope:prev_exp < character_master_threshhold
						}
					}
				}
				root = {
					reset_research_institute_pm = yes
				}
			}
		}
	}
}

cleanup_researchers = {
	if = {
		limit = {
			has_variable = magic_researcher
			OR = {
				NOT = {
					exists = var:magic_researcher
				}
				var:magic_researcher ?= {
					is_character_alive = no
				}
			}
		}
		if = {
			limit = {
				has_journal_entry = je_gate_researching_magic
			}
			je:je_gate_researching_magic = {
				clear_variable_list = com_journal_characters
			}
		}
		activate_production_method = {
			building_type = building_magic_research_institute
			production_method = pm_no_researcher
		}
		remove_variable = magic_researcher
	}
}

ai_unlock_magic_technology = {
	if = {
		limit = {
			NOT = {
				has_technology_researched = gate_mana_extraction
			}
		}
		add_technology_researched = gate_mana_extraction
	}
	else_if = {
		limit = {
			NOT = {
				has_technology_researched = magic_farming
			}
		}
		add_technology_researched = magic_farming
	}
	else_if = {
		limit = {
			NOT = {
				has_technology_researched = mage_infantry
			}
		}
		add_technology_researched = mage_infantry
	}
	else_if = {
		limit = {
			NOT = {
				has_technology_researched = battlefield_wards
			}
		}
		add_technology_researched = battlefield_wards
	}
	else_if = {
		limit = {
			NOT = {
				has_technology_researched = mana_lanterns
			}
		}
		add_technology_researched = mana_lanterns
	}
	else_if = {
		limit = {
			NOT = {
				has_technology_researched = formalized_magic
			}
		}
		add_technology_researched = formalized_magic
	}
	else_if = {
		limit = {
			NOT = {
				has_technology_researched = living_irrigation
			}
		}
		add_technology_researched = living_irrigation
	}
	else_if = {
		limit = {
			NOT = {
				has_technology_researched = monster_compendium
			}
		}
		add_technology_researched = monster_compendium
	}
	else_if = {
		limit = {
			NOT = {
				has_technology_researched = healing_circles
			}
		}
		add_technology_researched = healing_circles
	}
	else_if = {
		limit = {
			NOT = {
				has_technology_researched = mage_artillery
			}
		}
		add_technology_researched = mage_artillery
	}
	else_if = {
		limit = {
			NOT = {
				has_technology_researched = ritual_magic
			}
		}
		add_technology_researched = ritual_magic
	}
	else_if = {
		limit = {
			this = c:GATE_MK
			NOT = {
				has_technology_researched = magic_dwarf_murk_railways
			}
		}
		add_technology_researched = magic_dwarf_murk_railways
	}
	else_if = {
		limit = {
			NOT = {
				has_technology_researched = mana_cores
			}
		}
		add_technology_researched = mana_cores
	}
	else_if = {
		limit = {
			NOT = {
				has_technology_researched = arcane_foundries
			}
		}
		add_technology_researched = arcane_foundries
	}
	else_if = {
		limit = {
			NOT = {
				has_technology_researched = regenerative_timber
			}
		}
		add_technology_researched = regenerative_timber
	}
	else_if = {
		limit = {
			NOT = {
				has_technology_researched = magic_golems
			}
		}
		add_technology_researched = magic_golems
	}
	else_if = {
		limit = {
			NOT = {
				has_technology_researched = magic_science
			}
		}
		add_technology_researched = magic_science
	}
	else_if = {
		limit = {
			NOT = {
				has_technology_researched = mana_infused_fertilizers
			}
		}
		add_technology_researched = mana_infused_fertilizers
	}
	set_variable = {
		name = magic_innovation
		value = 0
	}
}

add_magic_innovation = {
	save_temporary_scope_value_as = {
		name = added_innovation
		value = $amount$
	}
	custom_tooltip = {
		text = effect_add_magic_innovation
		change_variable = {
			name = magic_innovation
			add = $amount$
		}
		clamp_variable = {
			name = magic_innovation
			min = 0
			max = global_var:magic_innovation_bank_max
		}
	}
}

gate_hire_researcher = {
	trigger_event = {
		id = researching_magic.4
		weeks = 1
	}
	set_variable = {
		name = actively_hiring_magic_researcher
		weeks = 1
	}
}

gate_add_researcher_experience = {
	if = {
		limit = {
			has_variable = magic_researcher
		}
		save_temporary_scope_value_as = {
			name = added_experience
			value = $amount$
		}
		custom_tooltip = {
			text = effect_gate_magic_experience
			# Propagation
			var:magic_researcher ?= {
				change_variable = {
					name = magic_experience
					add = $amount$
				}
				clamp_variable = {
					name = magic_experience
					min = 0
					max = character_experienced_maximum
				}
			}
		}
	}
}